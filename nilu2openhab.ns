/*
Get data from NILU -
Updates items at openHAB
*/
importScripts = require('./importscripts.js').importScripts;
importScripts('./settings.ns');
let XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
let got = require('got');

const LOGLEVEL_FATAL = true;
const LOGLEVEL_ERROR = true;
const LOGLEVEL_INFO = true;
const LOGLEVEL_DEBUG = false;
const LOGLEVEL_TRACE = false;

const NILU_API_URL = 'http://api.nilu.no/aq/utd?';
const NILU_API_AREAS = 'areas=Bergen';
const NILU_API_STATIONS_ROLLAND = '&stations=' + encodeURIComponent('Rolland, Ã…sane');
const NILU_API_STATIONS_DKPLASS = '&stations=' + encodeURIComponent('Danmarks plass');

const NILU_API_ROLLAND_NO2 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_ROLLAND + '&components=NO2';
const NILU_API_ROLLAND_PM25 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_ROLLAND + '&components=PM2.5';
const NILU_API_ROLLAND_PM10 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_ROLLAND + '&components=PM10';

const NILU_API_DKPLASS_NO2 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_DKPLASS + '&components=NO2';
const NILU_API_DKPLASS_PM25 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_DKPLASS + '&components=PM2.5';
const NILU_API_DKPLASS_PM10 = NILU_API_URL + NILU_API_AREAS + NILU_API_STATIONS_DKPLASS + '&components=PM10';

const OPENHAB_ITEM_AQ_UPDATED = 'AirQualityUpdated';
const OPENHAB_ITEM_AQ_Rolland_NO2 = 'AirQualityRolland_NO2';
const OPENHAB_ITEM_AQ_Rolland_PM25 = 'AirQualityRolland_PM25';
const OPENHAB_ITEM_AQ_Rolland_PM10 = 'AirQualityRolland_PM10';
const OPENHAB_ITEM_AQ_DKPlass_NO2 = 'AirQualityDKPlass_NO2';
const OPENHAB_ITEM_AQ_DKPlass_PM25 = 'AirQualityDKPlass_PM25';
const OPENHAB_ITEM_AQ_DKPlass_PM10 = 'AirQualityDKPlass_PM10';

if (LOGLEVEL_DEBUG) {
    console.log(ts() + " Gets data from api.nilu.no");
}

const DELAY_BETWEEN_CALLS = 5*1000; // 5 seconds

// Run Every Hour after first run if parameter 'forever' is present
let runForEver = false;
process.argv.forEach(function (val, index, array) {
    if ('forever' === val) {
        runForEver = true;
    }
});

setTimeout(() => {
    runUpdate();
    if (runForEver) {
        setInterval(() => {
            runUpdate();
        }, 60 * 60 * 1000);
    }
}, 1000);

function runUpdate() {
    getUpdate(NILU_API_ROLLAND_NO2, OPENHAB_ITEM_AQ_Rolland_NO2);
    setTimeout(() => { getUpdate(NILU_API_ROLLAND_PM10, OPENHAB_ITEM_AQ_Rolland_PM10); }, 1 * DELAY_BETWEEN_CALLS);
    setTimeout(() => { getUpdate(NILU_API_ROLLAND_PM25, OPENHAB_ITEM_AQ_Rolland_PM25); }, 2 * DELAY_BETWEEN_CALLS);
    setTimeout(() => { getUpdate(NILU_API_DKPLASS_NO2,  OPENHAB_ITEM_AQ_DKPlass_NO2);  }, 3 * DELAY_BETWEEN_CALLS);
    setTimeout(() => { getUpdate(NILU_API_DKPLASS_PM10, OPENHAB_ITEM_AQ_DKPlass_PM10); }, 4 * DELAY_BETWEEN_CALLS);
    setTimeout(() => { getUpdate(NILU_API_DKPLASS_PM25, OPENHAB_ITEM_AQ_DKPlass_PM25); }, 5 * DELAY_BETWEEN_CALLS);
    setTimeout(() => {
        const myTimestamp = ts();
        sendCommand(OPENHAB_ITEM_AQ_UPDATED, myTimestamp);
        if (LOGLEVEL_INFO) {
            console.log(ts() + ' openHAB item: ' + OPENHAB_ITEM_AQ_UPDATED + ' => ' + myTimestamp);
        }
        }, 6 * DELAY_BETWEEN_CALLS);
}

function getUpdate(fromUrl, openhabItem) {
    (async () => {
        try {
            if (LOGLEVEL_TRACE) {
                console.log('Retrieving data from URL: ' + fromUrl);
            }
            const response = await got(fromUrl);
            if (response.body) {
                let jsonData = JSON.parse(response.body.replace('[','').replace(']',''));
                if (LOGLEVEL_TRACE) {
                    console.log(JSON.stringify(jsonData, null, '  '));
                }
                let myCmd = jsonData.value.toFixed(2) + ' ' + jsonData.unit;
                if (LOGLEVEL_INFO) {
                    console.log( ts() + ' openHAB item: ' + openhabItem + ' => ' + myCmd );
                }
                sendCommand(openhabItem, myCmd);
            } else {
                if (LOGLEVEL_ERROR) {
                    console.log('No response.body returned...');
                }
            }
        } catch (error) {
            if (LOGLEVEL_ERROR) {
                console.log(error.response);
            }
        }
    })();
}


/**
 * Sends a command to update an openHAB Item
 *
 * @param itemId
 * @param command
 */
function sendCommand(itemId, command) {
    let xhr_sendCommand = new XMLHttpRequest();
    xhr_sendCommand.withCredentials = true;
    xhr_sendCommand.addEventListener("readystatechange", function () {
        if (this.readyState === this.DONE) {
            if (this.status === 200) {
                let res = this.responseText;
                if (LOGLEVEL_TRACE) {
                    console.log(ts() + " " + this.status +  " OK => Response: ", res);
                }
            } else {
                let res = this.responseText;
                if (LOGLEVEL_ERROR) {
                    console.log(ts() + " " + this.status +  " " + this.statusText + " => Response: ", JSON.stringify(res, null, 2) );
                }
            }
        }
    });
    xhr_sendCommand.open('POST', OPENHAB_URL + itemId);
    xhr_sendCommand.setRequestHeader("accept", "application/json");
    xhr_sendCommand.send(command);
}

/***********************************************************
 * Some DATETIME-related functions
 ***********************************************************
 */
function ts() {
    let d = new Date();
    return date2str_NO(d);
}
function date2str_NO(d) {
    return fix2digit(d.getDate()) + '.' + fixMonth(d.getMonth()) + '.' + d.getFullYear() + ' ' +
        fix2digit(d.getHours()) + ':' + fix2digit(d.getMinutes()) + ':' + fix2digit(d.getSeconds());
}
function fixMonth(num) {
    let month = num + 1;
    if (month < 10) {
        return '0' + month;
    } else {
        return '' + month;
    }
}
function fix2digit(num) {
    if (num < 10) {
        return '0' + num;
    } else {
        return '' + num;
    }
}

